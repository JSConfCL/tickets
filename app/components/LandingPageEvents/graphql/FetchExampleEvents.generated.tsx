/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
/* eslint-disable */
/* prettier-ignore */
/* This file is automatically generated. Please do not modify it manually. */
import * as Types from '../../../api/gql/graphql';

import { gql } from "graphql-tag";
import * as Apollo from "@apollo/client";
const defaultOptions = {} as const;
export type FetchExampleEventsQueryVariables = Types.Exact<{
  input: Types.PaginatedInputEventsSearchInput;
}>;

export type FetchExampleEventsQuery = {
  __typename?: "Query";
  searchEvents: {
    __typename?: "PaginatedEvent";
    data: Array<{
      __typename?: "Event";
      id: string;
      description?: string | null;
      community?: {
        __typename?: "Community";
        id: string;
        name?: string | null;
      } | null;
      tags: Array<{
        __typename?: "Tag";
        id: string;
        name?: string | null;
        description?: string | null;
      }>;
    }>;
  };
};

export const FetchExampleEventsDocument = gql`
  query FetchExampleEvents($input: PaginatedInputEventsSearchInput!) {
    searchEvents(input: $input) {
      data {
        id
        description
        community {
          id
          name
        }
        tags {
          id
          name
          description
        }
      }
    }
  }
`;

/**
 * __useFetchExampleEventsQuery__
 *
 * To run a query within a React component, call `useFetchExampleEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useFetchExampleEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFetchExampleEventsQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useFetchExampleEventsQuery(
  baseOptions: Apollo.QueryHookOptions<
    FetchExampleEventsQuery,
    FetchExampleEventsQueryVariables
  > &
    (
      | { variables: FetchExampleEventsQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    FetchExampleEventsQuery,
    FetchExampleEventsQueryVariables
  >(FetchExampleEventsDocument, options);
}
export function useFetchExampleEventsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    FetchExampleEventsQuery,
    FetchExampleEventsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    FetchExampleEventsQuery,
    FetchExampleEventsQueryVariables
  >(FetchExampleEventsDocument, options);
}
export function useFetchExampleEventsSuspenseQuery(
  baseOptions?: Apollo.SuspenseQueryHookOptions<
    FetchExampleEventsQuery,
    FetchExampleEventsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSuspenseQuery<
    FetchExampleEventsQuery,
    FetchExampleEventsQueryVariables
  >(FetchExampleEventsDocument, options);
}
export type FetchExampleEventsQueryHookResult = ReturnType<
  typeof useFetchExampleEventsQuery
>;
export type FetchExampleEventsLazyQueryHookResult = ReturnType<
  typeof useFetchExampleEventsLazyQuery
>;
export type FetchExampleEventsSuspenseQueryHookResult = ReturnType<
  typeof useFetchExampleEventsSuspenseQuery
>;
export type FetchExampleEventsQueryResult = Apollo.QueryResult<
  FetchExampleEventsQuery,
  FetchExampleEventsQueryVariables
>;
