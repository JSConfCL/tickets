/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
/* eslint-disable */
/* prettier-ignore */
/* This file is automatically generated. Please do not modify it manually. */
import * as Types from '../../../api/gql/graphql';

import { gql } from "graphql-tag";
import * as Apollo from "@apollo/client";
const defaultOptions = {} as const;
export type ClaimUserTicketAddonsMutationVariables = Types.Exact<{
  addonsClaims:
    | Array<Types.ClaimUserTicketAddonInput>
    | Types.ClaimUserTicketAddonInput;
}>;

export type ClaimUserTicketAddonsMutation = {
  __typename?: "Mutation";
  claimUserTicketAddons:
    | {
        __typename: "PurchaseOrder";
        id: string;
        status?: Types.PurchaseOrderStatusEnum | null;
        userTicketAddons: Array<{
          __typename?: "UserTicketAddon";
          id: string;
          approvalStatus: Types.UserTicketAddonApprovalStatus;
          redemptionStatus: Types.UserTicketAddonStatus;
        }>;
      }
    | {
        __typename: "RedeemUserTicketAddonsError";
        error: boolean;
        errorMessage: string;
      };
};

export const ClaimUserTicketAddonsDocument = gql`
  mutation claimUserTicketAddons($addonsClaims: [ClaimUserTicketAddonInput!]!) {
    claimUserTicketAddons(addonsClaims: $addonsClaims) {
      __typename
      ... on PurchaseOrder {
        __typename
        id
        status
        userTicketAddons {
          id
          approvalStatus
          redemptionStatus
        }
      }
      ... on RedeemUserTicketAddonsError {
        __typename
        error
        errorMessage
      }
    }
  }
`;
export type ClaimUserTicketAddonsMutationFn = Apollo.MutationFunction<
  ClaimUserTicketAddonsMutation,
  ClaimUserTicketAddonsMutationVariables
>;

/**
 * __useClaimUserTicketAddonsMutation__
 *
 * To run a mutation, you first call `useClaimUserTicketAddonsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useClaimUserTicketAddonsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [claimUserTicketAddonsMutation, { data, loading, error }] = useClaimUserTicketAddonsMutation({
 *   variables: {
 *      addonsClaims: // value for 'addonsClaims'
 *   },
 * });
 */
export function useClaimUserTicketAddonsMutation(
  baseOptions?: Apollo.MutationHookOptions<
    ClaimUserTicketAddonsMutation,
    ClaimUserTicketAddonsMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    ClaimUserTicketAddonsMutation,
    ClaimUserTicketAddonsMutationVariables
  >(ClaimUserTicketAddonsDocument, options);
}
export type ClaimUserTicketAddonsMutationHookResult = ReturnType<
  typeof useClaimUserTicketAddonsMutation
>;
export type ClaimUserTicketAddonsMutationResult =
  Apollo.MutationResult<ClaimUserTicketAddonsMutation>;
export type ClaimUserTicketAddonsMutationOptions = Apollo.BaseMutationOptions<
  ClaimUserTicketAddonsMutation,
  ClaimUserTicketAddonsMutationVariables
>;
