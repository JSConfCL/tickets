/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
/* eslint-disable */
/* prettier-ignore */
/* This file is automatically generated. Please do not modify it manually. */
import * as Types from '../../../api/gql/graphql';

import { gql } from "graphql-tag";
import * as Apollo from "@apollo/client";
const defaultOptions = {} as const;
export type MyEventAddonsQueryVariables = Types.Exact<{
  eventId: Types.Scalars["String"]["input"];
}>;

export type MyEventAddonsQuery = {
  __typename?: "Query";
  searchAddons: Array<{
    __typename?: "Addon";
    id: string;
    description?: string | null;
    isFree: boolean;
    maxPerTicket?: number | null;
    name: string;
    totalStock?: number | null;
    constraints: Array<{
      __typename?: "AddonConstraint";
      id: string;
      addonId: string;
      relatedAddonId: string;
      constraintType: Types.AddonConstraintType;
    }>;
    ticketAddons: Array<{
      __typename?: "TicketAddon";
      id: string;
      addonId: string;
      orderDisplay: number;
      ticketId: string;
    }>;
  }>;
};

export const MyEventAddonsDocument = gql`
  query myEventAddons($eventId: String!) {
    searchAddons(eventId: $eventId) {
      id
      description
      isFree
      maxPerTicket
      name
      totalStock
      constraints {
        id
        addonId
        relatedAddonId
        constraintType
      }
      ticketAddons {
        id
        addonId
        orderDisplay
        ticketId
      }
    }
  }
`;

/**
 * __useMyEventAddonsQuery__
 *
 * To run a query within a React component, call `useMyEventAddonsQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyEventAddonsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyEventAddonsQuery({
 *   variables: {
 *      eventId: // value for 'eventId'
 *   },
 * });
 */
export function useMyEventAddonsQuery(
  baseOptions: Apollo.QueryHookOptions<
    MyEventAddonsQuery,
    MyEventAddonsQueryVariables
  > &
    (
      | { variables: MyEventAddonsQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<MyEventAddonsQuery, MyEventAddonsQueryVariables>(
    MyEventAddonsDocument,
    options,
  );
}
export function useMyEventAddonsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    MyEventAddonsQuery,
    MyEventAddonsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<MyEventAddonsQuery, MyEventAddonsQueryVariables>(
    MyEventAddonsDocument,
    options,
  );
}
export function useMyEventAddonsSuspenseQuery(
  baseOptions?: Apollo.SuspenseQueryHookOptions<
    MyEventAddonsQuery,
    MyEventAddonsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSuspenseQuery<
    MyEventAddonsQuery,
    MyEventAddonsQueryVariables
  >(MyEventAddonsDocument, options);
}
export type MyEventAddonsQueryHookResult = ReturnType<
  typeof useMyEventAddonsQuery
>;
export type MyEventAddonsLazyQueryHookResult = ReturnType<
  typeof useMyEventAddonsLazyQuery
>;
export type MyEventAddonsSuspenseQueryHookResult = ReturnType<
  typeof useMyEventAddonsSuspenseQuery
>;
export type MyEventAddonsQueryResult = Apollo.QueryResult<
  MyEventAddonsQuery,
  MyEventAddonsQueryVariables
>;
