/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
/* eslint-disable */
/* prettier-ignore */
/* This file is automatically generated. Please do not modify it manually. */
import * as Types from '../../../api/gql/graphql';

import { gql } from "graphql-tag";
import * as Apollo from "@apollo/client";
const defaultOptions = {} as const;
export type TransferTicketMutationVariables = Types.Exact<{
  ticketId: Types.Scalars["String"]["input"];
  input: Types.UserTicketTransferInfoInput;
}>;

export type TransferTicketMutation = {
  __typename?: "Mutation";
  transferMyTicketToUser: {
    __typename?: "UserTicketTransfer";
    id: string;
    status: Types.TicketTransferAttemptStatus;
    expirationDate: any;
    transferMessage?: string | null;
    sender: {
      __typename?: "TicketTransferUserInfo";
      email: string;
      name?: string | null;
    };
    recipient: {
      __typename?: "TicketTransferUserInfo";
      email: string;
      name?: string | null;
    };
    userTicket: {
      __typename?: "UserTicket";
      id: string;
      approvalStatus: Types.TicketApprovalStatus;
    };
  };
};

export const TransferTicketDocument = gql`
  mutation transferTicket(
    $ticketId: String!
    $input: UserTicketTransferInfoInput!
  ) {
    transferMyTicketToUser(ticketId: $ticketId, input: $input) {
      id
      status
      expirationDate
      transferMessage
      sender {
        email
        name
      }
      recipient {
        email
        name
      }
      userTicket {
        id
        approvalStatus
      }
    }
  }
`;
export type TransferTicketMutationFn = Apollo.MutationFunction<
  TransferTicketMutation,
  TransferTicketMutationVariables
>;

/**
 * __useTransferTicketMutation__
 *
 * To run a mutation, you first call `useTransferTicketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTransferTicketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [transferTicketMutation, { data, loading, error }] = useTransferTicketMutation({
 *   variables: {
 *      ticketId: // value for 'ticketId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useTransferTicketMutation(
  baseOptions?: Apollo.MutationHookOptions<
    TransferTicketMutation,
    TransferTicketMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    TransferTicketMutation,
    TransferTicketMutationVariables
  >(TransferTicketDocument, options);
}
export type TransferTicketMutationHookResult = ReturnType<
  typeof useTransferTicketMutation
>;
export type TransferTicketMutationResult =
  Apollo.MutationResult<TransferTicketMutation>;
export type TransferTicketMutationOptions = Apollo.BaseMutationOptions<
  TransferTicketMutation,
  TransferTicketMutationVariables
>;
