/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
/* eslint-disable */
/* prettier-ignore */
/* This file is automatically generated. Please do not modify it manually. */
import * as Types from '../../../api/gql/graphql';

import { gql } from "graphql-tag";
import * as Apollo from "@apollo/client";
const defaultOptions = {} as const;
export type MyTicketTransfersQueryVariables = Types.Exact<{
  [key: string]: never;
}>;

export type MyTicketTransfersQuery = {
  __typename?: "Query";
  myTicketTransfers: Array<{
    __typename?: "UserTicketTransfer";
    createdAt: any;
    expirationDate: any;
    id: string;
    status: Types.TicketTransferAttemptStatus;
    transferMessage?: string | null;
    recipient: {
      __typename?: "TicketTransferUserInfo";
      email: string;
      name?: string | null;
    };
    sender: {
      __typename?: "TicketTransferUserInfo";
      email: string;
      name?: string | null;
    };
    userTicket: {
      __typename?: "UserTicket";
      id: string;
      ticketTemplate: {
        __typename?: "Ticket";
        name: string;
        event: { __typename?: "Event"; id: string; name: string };
      };
    };
  }>;
};

export const MyTicketTransfersDocument = gql`
  query myTicketTransfers {
    myTicketTransfers {
      createdAt
      expirationDate
      id
      recipient {
        email
        name
      }
      sender {
        email
        name
      }
      status
      transferMessage
      userTicket {
        id
        ticketTemplate {
          name
          event {
            id
            name
          }
        }
      }
    }
  }
`;

/**
 * __useMyTicketTransfersQuery__
 *
 * To run a query within a React component, call `useMyTicketTransfersQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyTicketTransfersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyTicketTransfersQuery({
 *   variables: {
 *   },
 * });
 */
export function useMyTicketTransfersQuery(
  baseOptions?: Apollo.QueryHookOptions<
    MyTicketTransfersQuery,
    MyTicketTransfersQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    MyTicketTransfersQuery,
    MyTicketTransfersQueryVariables
  >(MyTicketTransfersDocument, options);
}
export function useMyTicketTransfersLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    MyTicketTransfersQuery,
    MyTicketTransfersQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    MyTicketTransfersQuery,
    MyTicketTransfersQueryVariables
  >(MyTicketTransfersDocument, options);
}
export function useMyTicketTransfersSuspenseQuery(
  baseOptions?: Apollo.SuspenseQueryHookOptions<
    MyTicketTransfersQuery,
    MyTicketTransfersQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSuspenseQuery<
    MyTicketTransfersQuery,
    MyTicketTransfersQueryVariables
  >(MyTicketTransfersDocument, options);
}
export type MyTicketTransfersQueryHookResult = ReturnType<
  typeof useMyTicketTransfersQuery
>;
export type MyTicketTransfersLazyQueryHookResult = ReturnType<
  typeof useMyTicketTransfersLazyQuery
>;
export type MyTicketTransfersSuspenseQueryHookResult = ReturnType<
  typeof useMyTicketTransfersSuspenseQuery
>;
export type MyTicketTransfersQueryResult = Apollo.QueryResult<
  MyTicketTransfersQuery,
  MyTicketTransfersQueryVariables
>;
