/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
/* eslint-disable */
/* prettier-ignore */
/* This file is automatically generated. Please do not modify it manually. */
import * as Types from '../../../api/gql/graphql';

import { gql } from "graphql-tag";
import * as Apollo from "@apollo/client";
const defaultOptions = {} as const;
export type MyEventsQueryVariables = Types.Exact<{
  input: Types.PaginatedInputEventsSearchInput;
  userTicketSearchInput?: Types.InputMaybe<Types.EventsTicketsSearchInput>;
}>;

export type MyEventsQuery = {
  __typename?: "Query";
  searchEvents: {
    __typename?: "PaginatedEvent";
    data: Array<{
      __typename?: "Event";
      id: string;
      name: string;
      description?: string | null;
      startDateTime: any;
      address?: string | null;
      status: Types.EventStatus;
      previewImage?: { __typename?: "Image"; url: string } | null;
      community?: {
        __typename?: "Community";
        id: string;
        name?: string | null;
      } | null;
      usersTickets: Array<{
        __typename?: "UserTicket";
        id: string;
        approvalStatus: Types.TicketApprovalStatus;
        paymentStatus?: Types.PurchaseOrderPaymentStatusEnum | null;
        redemptionStatus: Types.TicketRedemptionStatus;
        ticketTemplate: {
          __typename?: "Ticket";
          description?: string | null;
          id: string;
        };
      }>;
    }>;
    pagination: {
      __typename?: "Pagination";
      currentPage: number;
      pageSize: number;
      totalPages: number;
      totalRecords: number;
    };
  };
};

export const MyEventsDocument = gql`
  query myEvents(
    $input: PaginatedInputEventsSearchInput!
    $userTicketSearchInput: EventsTicketsSearchInput
  ) {
    searchEvents(input: $input) {
      data {
        id
        name
        description
        startDateTime
        address
        previewImage {
          url
        }
        community {
          id
          name
        }
        status
        usersTickets(input: $userTicketSearchInput) {
          id
          approvalStatus
          paymentStatus
          redemptionStatus
          ticketTemplate {
            description
            id
          }
        }
      }
      pagination {
        currentPage
        pageSize
        totalPages
        totalRecords
      }
    }
  }
`;

/**
 * __useMyEventsQuery__
 *
 * To run a query within a React component, call `useMyEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyEventsQuery({
 *   variables: {
 *      input: // value for 'input'
 *      userTicketSearchInput: // value for 'userTicketSearchInput'
 *   },
 * });
 */
export function useMyEventsQuery(
  baseOptions: Apollo.QueryHookOptions<MyEventsQuery, MyEventsQueryVariables> &
    ({ variables: MyEventsQueryVariables; skip?: boolean } | { skip: boolean }),
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<MyEventsQuery, MyEventsQueryVariables>(
    MyEventsDocument,
    options,
  );
}
export function useMyEventsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    MyEventsQuery,
    MyEventsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<MyEventsQuery, MyEventsQueryVariables>(
    MyEventsDocument,
    options,
  );
}
export function useMyEventsSuspenseQuery(
  baseOptions?: Apollo.SuspenseQueryHookOptions<
    MyEventsQuery,
    MyEventsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSuspenseQuery<MyEventsQuery, MyEventsQueryVariables>(
    MyEventsDocument,
    options,
  );
}
export type MyEventsQueryHookResult = ReturnType<typeof useMyEventsQuery>;
export type MyEventsLazyQueryHookResult = ReturnType<
  typeof useMyEventsLazyQuery
>;
export type MyEventsSuspenseQueryHookResult = ReturnType<
  typeof useMyEventsSuspenseQuery
>;
export type MyEventsQueryResult = Apollo.QueryResult<
  MyEventsQuery,
  MyEventsQueryVariables
>;
