/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
/* eslint-disable */
/* prettier-ignore */
/* This file is automatically generated. Please do not modify it manually. */
import * as Types from '../../../api/gql/graphql';

import { gql } from "graphql-tag";
import * as Apollo from "@apollo/client";
const defaultOptions = {} as const;
export type MyReceivedTransfersQueryVariables = Types.Exact<{
  [key: string]: never;
}>;

export type MyReceivedTransfersQuery = {
  __typename?: "Query";
  myTicketTransfers: Array<{
    __typename?: "UserTicketTransfer";
    createdAt: any;
    expirationDate: any;
    id: string;
    status: Types.TicketTransferAttemptStatus;
    transferMessage?: string | null;
    sender: {
      __typename?: "TicketTransferUserInfo";
      email: string;
      name?: string | null;
    };
    userTicket: {
      __typename?: "UserTicket";
      id: string;
      ticketTemplate: {
        __typename?: "Ticket";
        name: string;
        event: { __typename?: "Event"; id: string; name: string };
      };
    };
  }>;
};

export const MyReceivedTransfersDocument = gql`
  query myReceivedTransfers {
    myTicketTransfers(type: RECEIVED) {
      createdAt
      expirationDate
      id
      sender {
        email
        name
      }
      status
      transferMessage
      userTicket {
        id
        ticketTemplate {
          name
          event {
            id
            name
          }
        }
      }
    }
  }
`;

/**
 * __useMyReceivedTransfersQuery__
 *
 * To run a query within a React component, call `useMyReceivedTransfersQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyReceivedTransfersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyReceivedTransfersQuery({
 *   variables: {
 *   },
 * });
 */
export function useMyReceivedTransfersQuery(
  baseOptions?: Apollo.QueryHookOptions<
    MyReceivedTransfersQuery,
    MyReceivedTransfersQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<
    MyReceivedTransfersQuery,
    MyReceivedTransfersQueryVariables
  >(MyReceivedTransfersDocument, options);
}
export function useMyReceivedTransfersLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    MyReceivedTransfersQuery,
    MyReceivedTransfersQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    MyReceivedTransfersQuery,
    MyReceivedTransfersQueryVariables
  >(MyReceivedTransfersDocument, options);
}
export function useMyReceivedTransfersSuspenseQuery(
  baseOptions?: Apollo.SuspenseQueryHookOptions<
    MyReceivedTransfersQuery,
    MyReceivedTransfersQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSuspenseQuery<
    MyReceivedTransfersQuery,
    MyReceivedTransfersQueryVariables
  >(MyReceivedTransfersDocument, options);
}
export type MyReceivedTransfersQueryHookResult = ReturnType<
  typeof useMyReceivedTransfersQuery
>;
export type MyReceivedTransfersLazyQueryHookResult = ReturnType<
  typeof useMyReceivedTransfersLazyQuery
>;
export type MyReceivedTransfersSuspenseQueryHookResult = ReturnType<
  typeof useMyReceivedTransfersSuspenseQuery
>;
export type MyReceivedTransfersQueryResult = Apollo.QueryResult<
  MyReceivedTransfersQuery,
  MyReceivedTransfersQueryVariables
>;
