/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
/* eslint-disable */
/* prettier-ignore */
/* This file is automatically generated. Please do not modify it manually. */
import * as Types from '../../../api/gql/graphql';

import { gql } from "graphql-tag";
import * as Apollo from "@apollo/client";
const defaultOptions = {} as const;
export type MyPurchaseOrdersQueryVariables = Types.Exact<{
  input: Types.PaginatedInputMyPurchaseOrdersInput;
}>;

export type MyPurchaseOrdersQuery = {
  __typename?: "Query";
  myPurchaseOrders: {
    __typename?: "PaginatedPurchaseOrder";
    data: Array<{
      __typename?: "PurchaseOrder";
      id: string;
      finalPrice?: number | null;
      paymentPlatform?: string | null;
      createdAt?: any | null;
      currency?: {
        __typename?: "AllowedCurrency";
        id: string;
        currency: string;
      } | null;
      tickets: Array<{
        __typename?: "UserTicket";
        id: string;
        ticketTemplate: {
          __typename?: "Ticket";
          id: string;
          name: string;
          event: { __typename?: "Event"; id: string; name: string };
        };
      }>;
    }>;
  };
};

export const MyPurchaseOrdersDocument = gql`
  query MyPurchaseOrders($input: PaginatedInputMyPurchaseOrdersInput!) {
    myPurchaseOrders(input: $input) {
      data {
        id
        finalPrice
        paymentPlatform
        createdAt
        currency {
          id
          currency
        }
        tickets {
          id
          ticketTemplate {
            id
            name
            event {
              id
              name
            }
          }
        }
      }
    }
  }
`;

/**
 * __useMyPurchaseOrdersQuery__
 *
 * To run a query within a React component, call `useMyPurchaseOrdersQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyPurchaseOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyPurchaseOrdersQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useMyPurchaseOrdersQuery(
  baseOptions: Apollo.QueryHookOptions<
    MyPurchaseOrdersQuery,
    MyPurchaseOrdersQueryVariables
  > &
    (
      | { variables: MyPurchaseOrdersQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<MyPurchaseOrdersQuery, MyPurchaseOrdersQueryVariables>(
    MyPurchaseOrdersDocument,
    options,
  );
}
export function useMyPurchaseOrdersLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    MyPurchaseOrdersQuery,
    MyPurchaseOrdersQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<
    MyPurchaseOrdersQuery,
    MyPurchaseOrdersQueryVariables
  >(MyPurchaseOrdersDocument, options);
}
export function useMyPurchaseOrdersSuspenseQuery(
  baseOptions?: Apollo.SuspenseQueryHookOptions<
    MyPurchaseOrdersQuery,
    MyPurchaseOrdersQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSuspenseQuery<
    MyPurchaseOrdersQuery,
    MyPurchaseOrdersQueryVariables
  >(MyPurchaseOrdersDocument, options);
}
export type MyPurchaseOrdersQueryHookResult = ReturnType<
  typeof useMyPurchaseOrdersQuery
>;
export type MyPurchaseOrdersLazyQueryHookResult = ReturnType<
  typeof useMyPurchaseOrdersLazyQuery
>;
export type MyPurchaseOrdersSuspenseQueryHookResult = ReturnType<
  typeof useMyPurchaseOrdersSuspenseQuery
>;
export type MyPurchaseOrdersQueryResult = Apollo.QueryResult<
  MyPurchaseOrdersQuery,
  MyPurchaseOrdersQueryVariables
>;
