/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
/* eslint-disable */
/* prettier-ignore */
/* This file is automatically generated. Please do not modify it manually. */
import * as Types from '../../../api/gql/graphql';

import { gql } from "graphql-tag";
import * as Apollo from "@apollo/client";
const defaultOptions = {} as const;
export type MisTicketsQueryVariables = Types.Exact<{
  input: Types.PaginatedInputMyTicketsSearchValues;
}>;

export type MisTicketsQuery = {
  __typename?: "Query";
  myTickets: {
    __typename?: "PaginatedUserTicket";
    data: Array<{
      __typename?: "UserTicket";
      approvalStatus: Types.TicketApprovalStatus;
      id: string;
      paymentStatus: Types.TicketPaymentStatus;
      redemptionStatus: Types.TicketRedemptionStatus;
    }>;
    pagination: {
      __typename?: "Pagination";
      currentPage: number;
      pageSize: number;
      totalPages: number;
      totalRecords: number;
    };
  };
};

export const MisTicketsDocument = gql`
  query misTickets($input: PaginatedInputMyTicketsSearchValues!) {
    myTickets(input: $input) {
      data {
        approvalStatus
        id
        paymentStatus
        redemptionStatus
      }
      pagination {
        currentPage
        pageSize
        totalPages
        totalRecords
      }
    }
  }
`;

/**
 * __useMisTicketsQuery__
 *
 * To run a query within a React component, call `useMisTicketsQuery` and pass it any options that fit your needs.
 * When your component renders, `useMisTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMisTicketsQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useMisTicketsQuery(
  baseOptions: Apollo.QueryHookOptions<
    MisTicketsQuery,
    MisTicketsQueryVariables
  > &
    (
      | { variables: MisTicketsQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<MisTicketsQuery, MisTicketsQueryVariables>(
    MisTicketsDocument,
    options,
  );
}
export function useMisTicketsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    MisTicketsQuery,
    MisTicketsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<MisTicketsQuery, MisTicketsQueryVariables>(
    MisTicketsDocument,
    options,
  );
}
export function useMisTicketsSuspenseQuery(
  baseOptions?: Apollo.SuspenseQueryHookOptions<
    MisTicketsQuery,
    MisTicketsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSuspenseQuery<MisTicketsQuery, MisTicketsQueryVariables>(
    MisTicketsDocument,
    options,
  );
}
export type MisTicketsQueryHookResult = ReturnType<typeof useMisTicketsQuery>;
export type MisTicketsLazyQueryHookResult = ReturnType<
  typeof useMisTicketsLazyQuery
>;
export type MisTicketsSuspenseQueryHookResult = ReturnType<
  typeof useMisTicketsSuspenseQuery
>;
export type MisTicketsQueryResult = Apollo.QueryResult<
  MisTicketsQuery,
  MisTicketsQueryVariables
>;
