/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
/* eslint-disable */
/* prettier-ignore */
/* This file is automatically generated. Please do not modify it manually. */
import * as Types from '../../../api/gql/graphql';

import { gql } from "graphql-tag";
import * as Apollo from "@apollo/client";
const defaultOptions = {} as const;
export type MyProfileQueryVariables = Types.Exact<{ [key: string]: never }>;

export type MyProfileQuery = {
  __typename?: "Query";
  me: {
    __typename?: "User";
    id: string;
    bio?: string | null;
    lastName?: string | null;
    username: string;
    imageUrl?: string | null;
    isSuperAdmin?: boolean | null;
    email?: string | null;
    name?: string | null;
    impersonatedUser?: {
      __typename?: "User";
      id: string;
      name?: string | null;
    } | null;
    communities: Array<{
      __typename?: "Community";
      id: string;
      name?: string | null;
    }>;
  };
};

export const MyProfileDocument = gql`
  query myProfile {
    me {
      id
      bio
      lastName
      username
      imageUrl
      isSuperAdmin
      email
      name
      impersonatedUser {
        id
        name
      }
      communities {
        id
        name
      }
    }
  }
`;

/**
 * __useMyProfileQuery__
 *
 * To run a query within a React component, call `useMyProfileQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyProfileQuery({
 *   variables: {
 *   },
 * });
 */
export function useMyProfileQuery(
  baseOptions?: Apollo.QueryHookOptions<
    MyProfileQuery,
    MyProfileQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<MyProfileQuery, MyProfileQueryVariables>(
    MyProfileDocument,
    options,
  );
}
export function useMyProfileLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    MyProfileQuery,
    MyProfileQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<MyProfileQuery, MyProfileQueryVariables>(
    MyProfileDocument,
    options,
  );
}
export function useMyProfileSuspenseQuery(
  baseOptions?: Apollo.SuspenseQueryHookOptions<
    MyProfileQuery,
    MyProfileQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSuspenseQuery<MyProfileQuery, MyProfileQueryVariables>(
    MyProfileDocument,
    options,
  );
}
export type MyProfileQueryHookResult = ReturnType<typeof useMyProfileQuery>;
export type MyProfileLazyQueryHookResult = ReturnType<
  typeof useMyProfileLazyQuery
>;
export type MyProfileSuspenseQueryHookResult = ReturnType<
  typeof useMyProfileSuspenseQuery
>;
export type MyProfileQueryResult = Apollo.QueryResult<
  MyProfileQuery,
  MyProfileQueryVariables
>;
